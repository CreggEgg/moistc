use std::str::FromStr;
use crate::parser::{Op, Expr, Func, Value, Arg};

grammar;

Function: Func = {
  "funion " <name:Ident> <a: ArgsDef> " ("  <e: Expression>  ")"=> Func {name: name, args: a, body: e},
}

pub Functions: Vec<Func> = {
  Function* => <>
}

//<w: Whitespace> <w1: Whitespace>

Ident: String = <s:r"[a-zA-Z_]+"> => s.to_string();
Args: Vec<Box<Expr>> = "[" <e: Comma<Expression>> "]" => e.iter().map(|el| Box::new(el.clone())).collect::<Vec<Box<Expr>>>();
ArgsDef: Vec<Arg> = "[" <i: Comma<ArgDef>> "]" => i.iter().map(|el| el.clone()).collect::<Vec<Arg>>();
ArgDef: Arg = <i: Ident> ":" <t: Ident> => Arg { name: i, arg_type: t};

Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Whitespace: String = <s:r"[ ]+"> => s.to_string();

Expression: Expr = {
  <lhs: Expression> <o: Operator> <rhs: Term> => Expr::Operation(Box::new(lhs), o, Box::new(rhs)),
  <n: Number> => Expr::Value(Value::Number(n)),
  <b: Bool> => Expr::Value(Value::Bool(b)),
  <i: Ident> <a: Args>  => Expr::FunctionCall(i, a),
  <i: Ident> => Expr::Ident(i),
  "("<i: Ident> " is " <e: Expression>")"  => Expr::Def{ident: i, value: Box::new(e), },
  <l: Expression>"." <b: Expression> ";" => Expr::Then{lhs: Box::new(l), rhs: Box::new(b)},
  "if " <c: Expression> " then " <b: Expression> " else " <f: Expression> "end" => Expr::IfThen {condition: Box::new(c), then: Box::new(b), other: Box::new(f)}
}

// 
// body: Box::new(b)

Number: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();
Bool: bool = {
  "true" => true,
  "false" => false
};


Term: Expr = {
  Ident => Expr::Ident(<>),
  <n: Number> => Expr::Value(Value::Number(n)),
  "(" <e:Expression> ")" => e
}

Operator: Op = {
  "+" => Op::Add,
  "-" => Op::Sub,
  "/" => Op::Div,
  "*" => Op::Mul,
  ">=" => Op::Ge,
  "<=" => Op::Le,
  ">" => Op::Gt,
  "<" => Op::Lt,
  "=" => Op::Eq,
  "!=" => Op::Neq,
}
