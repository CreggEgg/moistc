use std::str::FromStr;
use crate::parser::{Op, Expr, Func, Value};

grammar;

Function: Func = {
  "funion " <name:Ident> <args: Args> " ("  <e: Expression>  ")"=> Func {name: name, args: Vec::new(), body: e},
}

pub Functions: Vec<Func> = {
  Function* => <>
}

//<w: Whitespace> <w1: Whitespace>

Ident: String = <s:r"[a-zA-Z_]+"> => s.to_string();
Args: String = <s:r"\[.*\]"> => s.to_string();

Whitespace: String = <s:r"[ ]+"> => s.to_string();

Expression: Expr = {
  <lhs: Expression> <o: Operator> <rhs: Term> => Expr::Operation(Box::new(lhs), o, Box::new(rhs)),
  <n: Number> => Expr::Value(Value::Number(n)),
  <i: Ident> <a: Args>  => Expr::FunctionCall(i, vec![]),
  <i: Ident> => Expr::Ident(i),
  <i: Ident> " is " <e: Expression> " then (" <b: Expression> ")" => Expr::Def{ident: i, value: Box::new(e), body: Box::new(b)}
}

Number: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();


Term: Expr = {
  Ident => Expr::Ident(<>),
  <n: Number> => Expr::Value(Value::Number(n)),
  "(" <e:Expression> ")" => e
}

Operator: Op = {
  "+" => Op::Add,
  "-" => Op::Sub,
  "/" => Op::Div,
  "*" => Op::Mul,
}
